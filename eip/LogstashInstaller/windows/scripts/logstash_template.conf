#SAMPLERS

# Sonicwall CEF
input {
    tcp {
        codec => cef {
          ecs_compatibility => v1
        }
        port => "SONICWALL_CEF"
        tags => "sonicwall-cef"
        add_field => { "[@metadata][_provider]" => "sonicwall-ecs" }
    }
    udp {
        codec => cef {
          ecs_compatibility => v1
        }
        port => "SONICWALL_CEF"
        tags => "sonicwall-cef"
        add_field => { "[@metadata][_provider]" => "sonicwall-ecs" }
    }
}

# Checkpoint Firewall CEF
input {
    tcp {
        codec => cef {
          ecs_compatibility => v1
            delimiter => "\n"
        }
        port => "CHECKPOINT_CEF"
        tags => "checkpoint-cef"
        add_field => { "[@metadata][_provider]" => "checkpoint-ecs" }
    }
    udp {
        codec => cef {
          ecs_compatibility => v1
        }
        port => "CHECKPOINT_CEF"
        tags => "checkpoint-cef"
        add_field => { "[@metadata][_provider]" => "checkpoint-ecs" }
    }
}

# Fortigate CEF
input {
    tcp {
        codec => cef {
          ecs_compatibility => v8
          delimiter => "\n"
        }
        port => "FORTIGATE_CEF"
        tags => "fortigate-cef"
        add_field => { "[@metadata][_provider]" => "fortigate-ecs" }
    }
    udp {
        codec => cef {
          ecs_compatibility => v8
        }
        port => "FORTIGATE_CEF"
        tags => "fortigate-cef"
        add_field => { "[@metadata][_provider]" => "fortigate-ecs" }
    }
}

# Palo Alto CEF
input {
    tcp {
        codec => cef {
          ecs_compatibility => v8
          delimiter => "\n"
        }
        port => "PALOALTO_CEF"
        tags => "paloalto-cef"
        add_field => { "[@metadata][_provider]" => "paloalto-ecs" }
    }
    udp {
        codec => cef {
          ecs_compatibility => v8
        }
        port => "PALOALTO_CEF"
        tags => "paloalto-cef"
        add_field => { "[@metadata][_provider]" => "paloalto-ecs" }
    }
}

# Forcepoint CEF
input {
    tcp {
        codec => cef {
          ecs_compatibility => v8
          delimiter => "\n"
        }
        port => "FORCEPOINT_CEF"
        tags => "forcepoint-cef"
        add_field => { "[@metadata][_provider]" => "forcepoint-ecs" }
    }
    udp {
        codec => cef {
          ecs_compatibility => v8
        }
        port => "FORCEPOINT_CEF"
        tags => "forcepoint-cef"
        add_field => { "[@metadata][_provider]" => "forcepoint-ecs" }
    }
}

#FortiAnalyzer CEF
input {
    tcp {
        type => "syslog"
        port => "FORTIANALYZER_CEF"
        tags => "fortianalyzer-cef"
        add_field => { "[@metadata][_provider]" => "fortianalyzer-ecs" }
    }
    udp {
        type => "syslog"
        port => "FORTIANALYZER_CEF"
        tags => "fortianalyzer-cef"
        add_field => { "[@metadata][_provider]" => "fortianalyzer-ecs" }
    }
}


# Watchguard ECS
input {
    tcp {
        type => "syslog"
        port => "WATCHGUARD_CEF"
        tags => "watchguard-ecs"
        add_field => { "[@metadata][_provider]" => "watchguard-ecs" }
    }
    udp {
        type => "syslog"
        port => "WATCHGUARD_CEF"
        tags => "watchguard-ecs"
        add_field => { "[@metadata][_provider]" => "watchguard-ecs" }
    }
}

# ESXi ECS
input {
    tcp {
        type => "syslog"
        port => "ESXI_ECS"
        tags => "esxi-ecs"
        add_field => { "[@metadata][_provider]" => "esxi-ecs" }
    }
    udp {
        type => "syslog"
        port => "ESXI_ECS"
        tags => "esxi-ecs"
        add_field => { "[@metadata][_provider]" => "esxi-ecs" }
    }
}

# Sophos ECS
input {
    tcp {
        type => "syslog"
        port => "SOPHOS_ECS"
        tags => "sophos-ecs"
        add_field => { "[@metadata][_provider]" => "sophos-ecs" }
    }
    udp {
        type => "syslog"
        port => "SOPHOS_ECS"
        tags => "sophos-ecs"
        add_field => { "[@metadata][_provider]" => "sophos-ecs" }
    }
}

# Meraki ECS
input {
    tcp {
        type => "syslog"
        port => "MERAKI_ECS"
        tags => "meraki-ecs"
        add_field => { "[@metadata][_provider]" => "meraki-ecs" }
    }
    udp {
        type => "syslog"
        port => "MERAKI_ECS"
        tags => "meraki-ecs"
        add_field => { "[@metadata][_provider]" => "meraki-ecs" }
    }
}


# Firepower ECS
input {
    tcp {
        type => "syslog"
        port => "FIREPOWER_ECS"
        tags => "firepower-ecs"
        add_field => { "[@metadata][_provider]" => "firepower-ecs" }
    }
    udp {
        type => "syslog"
        port => "FIREPOWER_ECS"
        tags => "firepower-ecs"
        add_field => { "[@metadata][_provider]" => "firepower-ecs" }
    }
}

# Cisco-Switch ECS
input {
    tcp {
        type => "syslog"
        port => "CISCO_SW_ECS"
        tags => "cisco-sw-ecs"
        add_field => { "[@metadata][_provider]" => "cisco-sw-ecs" }
    }
    udp {
        type => "syslog"
        port => "CISCO_SW_ECS"
        tags => "cisco-sw-ecs"
        add_field => { "[@metadata][_provider]" => "cisco-sw-ecs" }
    }
}

# cisco-vWLC ECS
input {
    tcp {
        type => "syslog"
        port => "CISCO_WLC_ECS"
        tags => "cisco-wlc-ecs"
        add_field => { "[@metadata][_provider]" => "cisco-wlc-ecs" }
    }
    udp {
        type => "syslog"
        port => "CISCO_WLC_ECS"
        tags => "cisco-wlc-ecs"
        add_field => { "[@metadata][_provider]" => "cisco-wlc-ecs" }
    }
}

# NetApp Storage ECS
input {
    tcp {
        type => "syslog"
        port => "NETAPP_STORAGE_ECS"
        tags => "netapp-storage-ecs"
        add_field => { "[@metadata][_provider]" => "netapp-storage-ecs" }
    }
    udp {
        type => "syslog"
        port => "NETAPP_STORAGE_ECS"
        tags => "netapp-storage-ecs"
        add_field => { "[@metadata][_provider]" => "netapp-storage-ecs" }
    }
}

# Aruba Switch ECS
input {
    tcp {
        type => "syslog"
        port => "ARUBA_SWITCH_ECS"
        tags => "aruba-switch-ecs"
		add_field => { "[@metadata][_provider]" => "aruba-switch-ecs" }
    }
    udp {
        type => "syslog"
        port => "ARUBA_SWITCH_ECS"
        tags => "aruba-switch-ecs"
		add_field => { "[@metadata][_provider]" => "aruba-switch-ecs" }
    }
}

# IBM 3PAR Storage
input {
    tcp {
        type => "syslog"
        port => "IBM_3PAR_STORAGE_ECS"
        tags => "ibm-3par-storage-ecs"
		add_field => { "[@metadata][_provider]" => "ibm-3par-storage-ecs" }
    }
    udp {
        type => "syslog"
        port => "IBM_3PAR_STORAGE_ECS"
        tags => "ibm-3par-storage-ecs"
		add_field => { "[@metadata][_provider]" => "ibm-3par-storage-ecs" }
    }
}

# IBM AS400
input {
    tcp {
        type => "syslog"
        port => "IBM_AS400_ECS"
        tags => "ibm-as400-ecs"
		add_field => { "[@metadata][_provider]" => "ibm-as400-ecs" }
    }
    udp {
        type => "syslog"
        port => "IBM_AS400_ECS"
        tags => "ibm-as400-ecs"
		add_field => { "[@metadata][_provider]" => "ibm-as400-ecs" }
    }
}

# QNAP NAS
input {
    tcp {
        type => "syslog"
        port => "QNAP_NAS_ECS"
        tags => "qnap-nas-ecs"
		add_field => { "[@metadata][_provider]" => "qnap-nas-ecs" }
    }
    udp {
        type => "syslog"
        port => "QNAP_NAS_ECS"
        tags => "qnap-nas-ecs"
		add_field => { "[@metadata][_provider]" => "qnap-nas-ecs" }
    }
}

# Nutanix
input {
    tcp {
        type => "syslog"
        port => "NUTANIX_ECS"
        tags => "nutanix-ecs"
		add_field => { "[@metadata][_provider]" => "nutanix-ecs" }
    }
    udp {
        type => "syslog"
        port => "NUTANIX_ECS"
        tags => "nutanix-ecs"
		add_field => { "[@metadata][_provider]" => "nutanix-ecs" }
    }
}

# Mellanox
input {
    tcp {
        type => "syslog"
        port => "MELLANOX_ECS"
        tags => "mellanox-ecs"
		add_field => { "[@metadata][_provider]" => "mellanox-ecs" }
    }
    udp {
        type => "syslog"
        port => "MELLANOX_ECS"
        tags => "mellanox-ecs"
		add_field => { "[@metadata][_provider]" => "mellanox-ecs" }
    }
}

# Zimperium Syslog
input {
    tcp {
        type => "syslog"
        port => "ZIMPERIUM_ECS"
        tags => "zimperium-ecs"
        add_field => { "[@metadata][_provider]" => "zimperium-ecs" }
    }
    udp {
        type => "syslog"
        port => "ZIMPERIUM_ECS"
        tags => "zimperium-ecs"
        add_field => { "[@metadata][_provider]" => "zimperium-ecs" }
    }
}

# Juniper
input {
    tcp {
        type => "syslog"
        port => "JUNIPER_ECS"
        tags => "juniper-ecs"
		add_field => { "[@metadata][_provider]" => "juniper-ecs" }
    }
    udp {
        type => "syslog"
        port => "JUNIPER_ECS"
        tags => "juniper-ecs"
		add_field => { "[@metadata][_provider]" => "juniper-ecs" }
    }
}

#Kemp
input {
    tcp {
        type => "syslog"
        port => "KEMP_ECS"
        tags => "kemp-ecs"
        add_field => { "[@metadata][_provider]" => "kemp-ecs" }
    }
    udp {
        type => "syslog"
        port => "KEMP_ECS"
        tags => "kemp-ecs"
        add_field => { "[@metadata][_provider]" => "kemp-ecs" }
    }
}

#Thor Scanner
input {
    tcp {
        type => "syslog"
        port => "THOR_ECS"
        tags => "thor-ecs"
        add_field => { "[@metadata][_provider]" => "thor-ecs" }
    }
    udp {
        type => "syslog"
        port => "THOR_ECS"
        tags => "thor-ecs"
        add_field => { "[@metadata][_provider]" => "thor-ecs" }
    }
}

#Ubiquiti
input {
    tcp {
        type => "syslog"
        port => "UBIQUITI_ECS"
        tags => "ubiquiti-ecs"
        add_field => { "[@metadata][_provider]" => "ubiquiti-ecs" }
    }
    udp {
        type => "syslog"
        port => "UBIQUITI_ECS"
        tags => "ubiquiti-ecs"
        add_field => { "[@metadata][_provider]" => "ubiquiti-ecs" }
    }
}

filter {
    if [message] == "" {
        drop {}
    }

    if "sonicwall-cef" in [tags] {
        mutate {
            add_field => {
                "[event][kind]" => "event"
                "[event][category]" => "network"
                "[event][provider]" => "sonicwall"
            }
        }
    }

    # Checkpoint CEF
    if "checkpoint-cef" in [tags] {

        # set default severity
        mutate {
            add_field => {
                "[@metadata][severity]" => "Unknown"
            }
        }

        # try getting severity from all possible fields and transform into compatible event.severity type
        if ["[event][severity]"] {
            mutate {
                replace => {
                    "[@metadata][severity]" => "%{[event][severity]}"
                }
            }
        }
        if [cp_severity] {
            mutate {
                replace => {
                    "[@metadata][severity]" => "%{cp_severity}"
                }
            }
        }
        if [cp_app_risk] {
            mutate {
                replace => {
                    "[@metadata][severity]" => "%{cp_app_risk}"
                }
            }
        }

        if "[@metadata][severity]" == "Low" {
            mutate { replace => { "[event][severity]" => 2 } }
        } else if "[@metadata][severity]" == "Medium" {
            mutate { replace => { "[event][severity]" => 3 } }
        } else if "[@metadata][severity]" == "High" {
            mutate { replace => { "[event][severity]" => 4 } }
        } else if "[@metadata][severity]" == "Very-High" {
            mutate { replace => { "[event][severity]" => 5 } }
        } else {
            mutate { replace => { "[event][severity]" => 1 } }
        }

        mutate {
            add_field => {
                "[event][kind]" => "event"
                "[event][category]" => "network"
                "[event][provider]" => "checkpoint"
            }
        }
    }

    if "fortigate-cef" in [tags] {
        mutate {
            add_field => {
                "[event][kind]" => "event"
                "[event][category]" => "network"
                "[event][provider]" => "fortigate"
            }
        }
    }

    if "paloalto-cef" in [tags] {

        if ["[event][severity]"] {
			mutate {
				gsub => [
				  "[event][severity]", "\s", ""
				]
			}
		}

        mutate {
            add_field => {
                "[event][kind]" => "event"
                "[event][category]" => "network"
                "[event][provider]" => "paloalto"
            }
        }
    }

    if "forcepoint-cef" in [tags] {
        mutate {
            add_field => {
                "[event][kind]" => "event"
                "[event][category]" => "network"
                "[event][provider]" => "forcepoint"
            }
            rename => {
			    "[log][syslog][facility][code]" => "[service][name]"
			}
        }
    }

    # Watchguard syslog
    if "watchguard" in [tags] {
        grok {
            match => {
                "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp}%{SPACE}%{WORD:member}%{SPACE}%{WORD:disposition}%{SPACE}%{HOSTNAME:source}%{SPACE}%{HOSTNAME:destination}%{SPACE}%{WORD:service}/%{WORD:protocol}%{SPACE}%{WORD:source_port}%{SPACE}%{WORD:destination_port}%{SPACE}(?<source_if>\b[\w\-]+\b)%{SPACE}(?<destination_if>\b[\w\-]+\b)%{SPACE}%{WORD:action}%{SPACE}%{INT:packet_length}%{SPACE}%{INT:packet_ttl}%{SPACE}\((?<policy_name>\b[\w\-]+\b)\)%{SPACE}%{GREEDYDATA:structured_data}"
            }
        }

        date {
            match => ["syslog_timestamp", "yyyy-MM-dd HH:mm:ss"]
            target => "@timestamp"
        }

        kv {
            source => "structured_data"
            value_split => "="
            trim_key => " "
        }

        mutate {
            remove_field => ["message", "structured_data", "syslog_timestamp"]
        }
    }

# Watchguard syslog to ECS
    if "watchguard-ecs" in [tags] {
        grok {
            match => {
                # Firewall
                "message" => [
                    # one group
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}(?<group>\b[\w\-\.]+\b)%{SPACE}(?:\(%{TIMESTAMP_ISO8601:optional_timestamp}\)%{SPACE})?(?<module>\b[\w\-]+\b):%{SPACE}%{GREEDYDATA:remaining}",
                    # two groups
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}(?<group>\b[\w\-\.]+\b)%{SPACE}(?<group2>\b[\w\-\.]+\b)%{SPACE}(?:\(%{TIMESTAMP_ISO8601:optional_timestamp}\)%{SPACE})?(?<module>\b[\w\-]+\b):%{SPACE}%{GREEDYDATA:remaining}",
                    # service with id or process id
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}(?<group>\b[\w\-\.]+\b)%{SPACE}(?:\(%{TIMESTAMP_ISO8601:optional_timestamp}\)%{SPACE})?(?<module>\b[\w\-]+\b)\[%{INT}\]\:%{SPACE}%{GREEDYDATA:remaining}",
                    # service with id and two groups
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}(?<group>\b[\w\-\.]+\b)%{SPACE}(?<group2>\b[\w\-\.]+\b)%{SPACE}(?:\(%{TIMESTAMP_ISO8601:optional_timestamp}\)%{SPACE})?(?<module>\b[\w\-]+\b)\[%{INT}\]\:%{SPACE}%{GREEDYDATA:remaining}"
                ]
            }
        }

        date {
            match => ["syslog_timestamp", "MMM dd HH:mm:ss","MMM  dd HH:mm:ss"]
            target => "@timestamp"
        }

        kv {
            source => "remaining"
            value_split => "="
            trim_key => " "
            target => "watchguard-fw"
            whitespace => strict
        }

        grok {
            match => {
                "remaining" => [
                    # with packet length and ip header len
                    "(?<disposition>(Allow|Deny))%{SPACE}(?<inif>\b[\w\-\.]+\b)%{SPACE}(?<outif>\b[\w\-\.\s]+\b)%{SPACE}%{INT:ip_pkt_len}%{SPACE}%{WORD:protocol}%{SPACE}%{INT:ip_header_len}%{SPACE}%{INT:ttl}%{SPACE}%{IP:src_ip}%{SPACE}%{IP:dst_ip}%{SPACE}%{INT:src_port}%{SPACE}%{INT:dst_port}(?<keys>(.*?)\s{2})\((?<policy>\b[\w\-\.\s]+\b)\)",

                    # without packet length and ip header len
                    "(?<disposition>(Allow|Deny))%{SPACE}(?<inif>\b[\w\-\.]+\b)%{SPACE}(?<outif>\b[\w\-\.\s]+\b)%{SPACE}(?<protocol>(tcp|udp))%{SPACE}%{IP:src_ip}%{SPACE}%{IP:dst_ip}%{SPACE}%{INT:src_port}%{SPACE}%{INT:dst_port}(?<keys>(.*?)\s{2})\((?<policy>\b[\w\-\.\s]+\b)\)",

                    # all other messages
                    "%{GREEDYDATA:raw_message}"
                ]
            }
        }

        # event.type selection
        if ["[watchguard-fw][disposition]"] =~ /(?:Allow|allow)/ or ["[watchguard-fw][action]"] =~ /(?:Allow|allow)/ or [message] =~ /(?:Allow|allow)/ {
            mutate {
                add_field => {
                    "[event][type]" => "allowed"
                }
            }
		}
		else if [message] =~ /(?:Deny|deny)/ {
            mutate {
                add_field => {
                    "[event][type]" => "denied"
                }
            }
        }

        # make message field empty
        mutate {
            remove_field => ["message"]
        }

        mutate {
            add_field => {
                "[event][kind]" => "event"
                "[event][category]" => "network"
                "[event][provider]" => "watchguard"
            }
            rename => {
                "inif" => "[observer][ingress][interface][name]"
                "outif" => "[observer][egress][interface][name]"
                "protocol" => "[network][protocol]"
                "ip_pkt_len" => "[network][ip_packet_len]"
                "ip_header_len" => "[network][ip_header_len]"
                "ttl" => "[network][ttl]"
                "src_ip" => "[source][ip]"
                "src_port" => "[source][port]"
                "dst_ip" => "[destination][ip]"
                "dst_port" => "[destination][port]"
                "policy" => "[rule][name]"
                "raw_message" => "message"
                "module" => "[service][name]"
                "group" => "[group][name]"
                "[watchguard-fw][msg_id]" => "[event][id]"
                "[watchguard-fw][geo_dst]" => "[destination][geo][continent_code]"
                "[watchguard-fw][geo_src]" => "[source][geo][continent_code]"
                "[watchguard-fw][rcvd_bytes]" => "[source][bytes]"
                "[watchguard-fw][sent_bytes]" => "[destination][bytes]"
                "[watchguard-fw][duration]" => "[event][duration]"
                "[watchguard-fw][fqdn_dst_match]" => "[host][name]"
                "[watchguard-fw][route_type]" => "[network][routing_type]"
                "[watchguard-fw][src_user]" => "[user][name]"
                "[watchguard-fw][msg]" => "message"
            }
            convert => {
                "[network][ip_packet_len]" => "integer"
                "[network][ip_header_len]" => "integer"
                "[network][ttl]" => "integer"
                "[source][bytes]" => "integer"
                "[source][port]" => "integer"
                "[destination][port]" => "integer"
                "[destination][bytes]" => "integer"
                "[event][duration]" => "integer"
                "[group][name]" => "string"
            }
            remove_field => [
                "structured_data",
                "syslog_timestamp",
                "remaining",
                "keys",
                "group2",
                "syslog_prio",
                "disposition",
				"optional_timestamp"
            ]
        }
    }

    if "esxi-ecs" in [tags] {

        grok {
        match => {
            "message" => [
                #<134>1 2023-03-04T02:59:58.856281+00:00 localhost vsan-health-main - - - 2023-03-04T02:59:58.856Z info vsanvcmgmtd[12381] [vSAN@6876 sub=AdapterServer opId=sps-Main-402183-741-898798-2ea1] Finished 'getAlarm' on 'vsanvp-notification-manager' (0 ms): done
                #<134>1 2023-03-04T02:59:58.856281+00:00 localhost vsan-health-main - - - 2023-03-04T02:59:58.856Z info vsanvcmgmtd[12381] [vSAN@6876 sub=AdapterServer opId=sps-Main-402183-741-898798-2ea1] Finished 'getAlarm' on 'vsanvp-notification-manager' (0 ms): done
                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}((?<dashes>(\w+|\-)\s*(\w+|\-)\s*(\w+|\-)))%{SPACE}((?<event_time>(\w{1,3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})|(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)))%{SPACE}%{WORD:log_level}%{SPACE}%{WORD:role}%{SPACE}\[%{DATA:service_id}\]%{SPACE}%{GREEDYDATA:log_message}",

                #<134>1 2023-03-08T08:13:32.239222+00:00 localhost dnsmasq - - - Mar  8 08:13:32 dnsmasq[1813]: query[AAAA] localhost from 127.0.0.1
                "<%{INT:syslog_pri}>%{INT}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}((?<dashes>(\w+|\-)\s*(\w+|\-)\s*(\w+|\-)))%{SPACE}((?<event_time>(\w{1,3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})|(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)))%{SPACE}%{WORD}\[%{NUMBER:service_id}]:%{SPACE}%{GREEDYDATA:remaining}",

                #<134>1 2023-03-08T08:13:03.464643+00:00 localhost eam-main - - - 2023-03-08T08:13:03.464Z |  INFO | vim-async-0 | OpIdLogger.java | 35 | [PropertyCollector(session[528ad61b-13c4-f83e-41c8-014a42c8c0cd]52f4f014-e935-869a-ac44-fc77a5331e8d)->WaitForUpdatesEx:eb7bd4596049e777] Completed.
                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}((?<dashes>(\w+|\-)\s*(\w+|\-)\s*(\w+|\-)))%{SPACE}((?<event_time>(\w{1,3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})|(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)))%{SPACE}\|%{SPACE}%{WORD:log_level}%{SPACE}\|%{SPACE}%{GREEDYDATA:remaining}",

                #<134>1 2023-03-08T08:13:06.386576+00:00 localhost sps - - - 2023-03-08T08:13:06.386Z [pool-25-thread-1] INFO  opId=sps-Main-402183-741 com.vmware.vim.storage.common.util.OperationIdUtil - OperationID present in invoker thread, adding suffix and re-using it sps-Main-402183-741-263186
                #<134>1 2023-03-04T02:59:59.233601+00:00 localhost vpxd-svcs-perf - - - 2023-03-04T02:59:59.233Z [pool-5-thread-1 [] INFO  com.vmware.cis.server.util.PerfLog  opId=] Connection type: LDAP, Max allowed connections: 24, Number of active connections: 1, Number of idle connections: 1
                #<134>1 2023-03-04T02:59:58.856848+00:00 localhost sps - - - 2023-03-04T02:59:58.856Z [pool-2-thread-5] INFO  opId= com.vmware.vim.storage.common.task.CustomThreadPoolExecutor - [VLSI-client] Request took 7 millis to execute.
                #<134>1 2023-03-08T08:13:06.386576+00:00 localhost sps - - - 2023-03-08T08:13:06.386Z [pool-25-thread-1] INFO  opId=sps-Main-402183-741 com.vmware.vim.storage.common.util.OperationIdUtil - OperationID present in invoker thread, adding suffix and re-using it sps-Main-402183-741-263186
                #<134>1 2023-03-04T02:59:59.233601+00:00 localhost vpxd-svcs-perf - - - 2023-03-04T02:59:59.233Z [pool-5-thread-1 [] INFO  com.vmware.cis.server.util.PerfLog  opId=] Connection type: LDAP, Max allowed connections: 24, Number of active connections: 1, Number of idle connections: 1
                #<134>1 2023-03-04T02:59:58.856848+00:00 localhost sps - - - 2023-03-04T02:59:58.856Z [pool-2-thread-5] INFO  opId= com.vmware.vim.storage.common.task.CustomThreadPoolExecutor - [VLSI-client] Request took 7 millis to execute.
                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}((?<dashes>(\w+|\-)\s*(\w+|\-)\s*(\w+|\-)))%{SPACE}((?<event_time>(\w{1,3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})|(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)))%{SPACE}\[%{DATA:service_id}\]%{SPACE}%{WORD:log_level}%{SPACE}%{GREEDYDATA:remaining}",

                #<134>1 2023-03-04T02:59:58.125448+00:00 localhost ui-threadmonitor - - - [2023-03-04T02:59:58.125Z] [INFO ] PI-client-connection-monitor  c.v.v.a.vapi.runtime.thread.ApacheBioHttpClientBuilderAspect      vAPI-client-connection-monitor thread started...
                #<134>1 2023-03-04T02:59:58.125491+00:00 localhost ui-threadmonitor - - - [2023-03-04T02:59:58.125Z] [INFO ] PI-client-connection-monitor  c.v.v.a.vapi.runtime.thread.ApacheBioHttpClientBuilderAspect      vAPI-client-connection-monitor thread ended.
                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}((?<dashes>(\w+|\-)\s*(\w+|\-)\s*(\w+|\-)))%{SPACE}\[((?<event_time>(\w{1,3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})|(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)))]%{SPACE}\[%{WORD:log_level}%{SPACE}\]%{SPACE}%{SPACE}%{GREEDYDATA:remaining}",

                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}((?<event_time>(\w{1,3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})|(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3,}\+.\d+:\d+|)))%{SPACE}(?<log_level>(info|quiet|panic|error|warning|verbose|trivia))%{SPACE}((?<service_id>(\d+)))%{SPACE}%{SPACE}%{GREEDYDATA:remaining}",

                #<134>1 2023-03-08T08:13:33.615380+00:00 localhost analytics - - - 2023-03-08T08:13:33.615Z data-app-collector-vsphere.adc.7_0U3  INFO  ph.phservice.collector.scheduler.DefaultCollectorLoop Data collector doesn't yet need to run.
                #<134>1 2023-03-08T08:13:33.613697+00:00 localhost analytics - - - 2023-03-08T08:13:33.613Z data-app-collector-vsphere.adc.7_0U3  INFO  phservice.cloud.dataapp.service.DefaultDataApp Could not find a manifest in DAP with the given manifest spec for vsphere.adc.7_0U3. Will fetch the manifest from the manifest API. \n
                #<134>1 2023-03-08T08:13:33.615368+00:00 localhost analytics - - - 2023-03-08T08:13:33.615Z data-app-collector-vsphere.adc.7_0U3  INFO  collector.internal.manifest.xml.XmlManifestParser The manifest contains the following schedules: [CollectionSchedule [interval=1h, retryInterval=0m, maxRetriesCount=0]].
                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}((?<event_time>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}(\w|\+\d{4})))%{SPACE}((?<role>\w+-\w+-\w+-\w+\.\w+\.\w_\w{3}))%{SPACE}%{WORD:log_level}%{SPACE}%{GREEDYDATA:remaining}",

                #<134>1 2023-03-04T02:59:52.515621+00:00 localhost vum-vmacore - - - 2023-03-04T02:59:52.515Z info vmware-vum-server[11774] [Originator@6876 sub=SessionAuthData] [vciSessionAuthData 74] Trying to get current VC connection for session [52f34bde-e8dd-b920-f5c3-8def66dcef0e]; user: com.vmware.vim.eam
                #<134>1 2023-03-04T02:59:52.515621+00:00 localhost vum-vmacore - - - 2023-03-04T02:59:52.515Z info vmware-vum-server[11774] [Originator@6876 sub=SessionAuthData] [vciSessionAuthData 74] Trying to get current VC connection for session [52f34bde-e8dd-b920-f5c3-8def66dcef0e]; user: com.vmware.vim.eam
                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}((?<event_time>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}(\w|\+\d{4})))%{SPACE}(?<log_level>(info|quiet|panic|error|warning|verbose|trivia))%{GREEDYDATA:remaining}",

                #<134>1 2023-03-08T08:13:32.789377+00:00 localhost vpxd-svcs-access - - - 2023-03-08T08:13:23.807+0000 38266 431 tomcat-exec-197 200 "VMware vim-java 1.0" POST /invsvc/vmomi/sdk/ HTTP/1.1 3
                #<134>1 2023-03-08T08:13:32.789377+00:00 localhost vpxd-svcs-access - - - 2023-03-08T08:13:23.807+0000 38266 431 tomcat-exec-197 200 "VMware vim-java 1.0" POST /invsvc/vmomi/sdk/ HTTP/1.1 3
                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}((?<event_time>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}(\w|\+\d{4})))%{SPACE}%{SPACE}%{GREEDYDATA:remaining}",

                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}((?<event_time>(\w{1,3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})|(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3,}\+.\d+:\d+|)))%{SPACE}%{WORD:log_level}%{SPACE}((?<service_id>(\d+)))%{SPACE}%{SPACE}%{GREEDYDATA:remaining}",

                #<134>1 2023-03-08T08:13:32.789377+00:00 localhost vpxd-svcs-access - - - 2023-03-08T08:13:23.807+0000 38266 431 tomcat-exec-197 200 "VMware vim-java 1.0" POST /invsvc/vmomi/sdk/ HTTP/1.1 3
                #<134>1 2023-03-08T08:13:32.789377+00:00 localhost vpxd-svcs-access - - - 2023-03-08T08:13:23.807+0000 38266 431 tomcat-exec-197 200 "VMware vim-java 1.0" POST /invsvc/vmomi/sdk/ HTTP/1.1 3
                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}((?<event_time>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}(\w|\+\d{4})))%{SPACE}%{SPACE}%{GREEDYDATA:remaining}",

                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}((?<event_time>(\w{1,3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})|(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3,}\+.\d+:\d+|)))%{SPACE}((?<service_id>(\d+)))%{SPACE}%{SPACE}%{GREEDYDATA:remaining}",

                #<134>1 2023-03-08T08:13:06.386576+00:00 localhost sps - - - 2023-03-08T08:13:06.386Z [pool-25-thread-1] INFO  opId=sps-Main-402183-741 com.vmware.vim.storage.common.util.OperationIdUtil - OperationID present in invoker thread, adding suffix and re-using it sps-Main-402183-741-263186
                #<134>1 2023-03-04T02:59:59.233601+00:00 localhost vpxd-svcs-perf - - - 2023-03-04T02:59:59.233Z [pool-5-thread-1 [] INFO  com.vmware.cis.server.util.PerfLog  opId=] Connection type: LDAP, Max allowed connections: 24, Number of active connections: 1, Number of idle connections: 1
                #<134>1 2023-03-04T02:59:58.856848+00:00 localhost sps - - - 2023-03-04T02:59:58.856Z [pool-2-thread-5] INFO  opId= com.vmware.vim.storage.common.task.CustomThreadPoolExecutor - [VLSI-client] Request took 7 millis to execute.
                #<134>1 2023-03-08T08:13:06.386576+00:00 localhost sps - - - 2023-03-08T08:13:06.386Z [pool-25-thread-1] INFO  opId=sps-Main-402183-741 com.vmware.vim.storage.common.util.OperationIdUtil - OperationID present in invoker thread, adding suffix and re-using it sps-Main-402183-741-263186
                #<134>1 2023-03-04T02:59:59.233601+00:00 localhost vpxd-svcs-perf - - - 2023-03-04T02:59:59.233Z [pool-5-thread-1 [] INFO  com.vmware.cis.server.util.PerfLog  opId=] Connection type: LDAP, Max allowed connections: 24, Number of active connections: 1, Number of idle connections: 1
                #<134>1 2023-03-04T02:59:58.856848+00:00 localhost sps - - - 2023-03-04T02:59:58.856Z [pool-2-thread-5] INFO  opId= com.vmware.vim.storage.common.task.CustomThreadPoolExecutor - [VLSI-client] Request took 7 millis to execute.
                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}((?<dashes>(\w+|\-)\s*(\w+|\-)\s*(\w+|\-)))%{SPACE}((?<event_time>(\w{1,3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})|(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)))%{SPACE}\[%{DATA:service_id}\]%{SPACE}%{WORD:log_level}%{SPACE}%{GREEDYDATA:remaining}",

                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}((?<dashes>(\w+|\-)\s*(\w+|\-)\s*(\w+|\-)))%{SPACE}((?<event_time>(\w{1,3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})|(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)))%{SPACE}%{WORD:log_level}%{SPACE}%{WORD:service_id}%{SPACE}%{GREEDYDATA:remaining}",

                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:event_time}%{SPACE}((?<service_id>\b(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62})(?:\.(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62}))*(\.?|\b)))%{SPACE}%{WORD:log_level}%{SPACE}%{GREEDYDATA:remaining}",

                "<%{INT:syslog_pri}>%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{TIMESTAMP_ISO8601:event_time}%{SPACE}%{GREEDYDATA:remaining}",

                #<134>1 2023-03-30T13:27:28.136008+00:00 localhost vcsa-audit - - - type=PATH msg=audit(1680160369.074:113494): item=0 name=\"/dev/shm/vmware-postgres-health-status.xml.tmp\" inode=17650669 dev=00:14 mode=0100640 ouid=1012 ogid=59026 rdev=00:00 nametype=NORMAL cap_fp=0000000000000000 cap_fi=0000000000000000 cap_fe=0 cap_fver=
                #<43>1 2023-03-30T13:27:28.583348+00:00 localhost rsyslogd - - -  imfile error: message received is larger than max msg size; message will be split and processed as another message [v8.2202.0]
                "<%{INT:syslog_pri}>%{INT}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}%{SPACE}((?<dashes>(\w+|\-)\s*(\w+|\-)\s*(\w+|\-)))%{SPACE}%{GREEDYDATA:remaining}"

            ]
            }
        }

		if ([role] =~ /.+/) {
             mutate {
                rename => {
                    "role" => "[observer][name]"
                }
				convert => {"[observer][name]" => "string"}
            }
        }
        if ([log_level] =~ /.+/) {
             mutate {
                rename => {
                    "log_level" => "[log][level]"
                }
				convert => {"[log][level]" => "string"}
            }
        }
		if ([service] =~ /.+/) {
             mutate {
                rename => {
                    "service" => "[service][name]"
                }
				convert => {"[service][name]" => "string"}
            }
        }
		if ([service_id] =~ /.+/) {
             mutate {
                rename => {
                    "service_id" => "[service][type]"
                }
				convert => {"[service][type]" => "string"}
            }
        }

        mutate {
            rename => {
                "remaining" => "message"
                }
            add_field => {
                "[event][kind]" => "event"
                "[event][category]" => "process"
                "[event][provider]" => "esxi"
            }
            remove_field => ["service","role","service_id","log_level","syslog_timestamp", "syslog_pri", "service_low", "class", "log_message", "structured_data","dashes","event_time","remaining","service_id","log_level"]
        }
    }

    # Sophos syslog to ECS
    if "sophos-ecs" in [tags] {
        grok {
            match => {
                "message" => "<%{INT:syslog_prio}>%{GREEDYDATA:structured_data}"
            }
        }

        kv {
            source => "structured_data"
            field_split => " "
            value_split => "="
            trim_key => " "
            whitespace => strict
            target => "sophos-fw"
        }

        translate {
            source => '[sophos-fw][timezone]'
            target => 'tz_num'
            dictionary => {
                'CET' => '+0100'
                'CEST' => '+0200'
                'IST' => '+0200'
                'IDT' => '+0300'
                'NDT' => '-0230'
                'ADT' => '-0300'
                'AST' => '-0400'
                'EDT' => '-0400'
                'EST' => '-0500'
                'CDT' => '-0500'
                'MDT' => '-0600'
                'CST' => '-0600'
                'MST' => '-0700'
                'PDT' => '-0700'
                'PST' => '-0800'
                'AKDT' => '-0800'
                'AKST' => '-0900'
                'HDT' => '-0900'
                'HST' => '-1000'
            }
            # UTC fallback for incomplete timezone support
            fallback => "+000"
            add_field => {
                "parsed_timestamp" => "%{[sophos-fw][date]} %{[sophos-fw][time]} %{tz_num}"
            }
        }

        date {
            # 2020-07-01 10:50:20 +200
            match => ["parsed_timestamp", "yyyy-MM-dd HH:mm:ss Z"]
            target => "@timestamp"
        }

        translate {
            source => '[sophos-fw][priority]'
            target => '[event][severity]'
            dictionary => {
                'Emergency' => 0
                'Alert' => 1
                'Critical' => 2
                'Error' => 3
                'Warning' => 4
                'Notice' => 5
                'Information' => 6
                'Debug' => 7
            }
            fallback => 7
        }

        mutate {
            add_field => {
                "[event][kind]" => "event"
                "[event][category]" => "network"
                "[event][provider]" => "sophos"
                "[observer][vendor]" => "sophos"
            }
            rename => {
                "[sophos-fw][src_ip]" => "[source][ip]"
                "[sophos-fw][src_port]" => "[source][port]"
                "[sophos-fw][tran_src_ip]" => "[source][nat][ip]"
                "[sophos-fw][src_mac]" => "[source][mac]"
                "[sophos-fw][src_country_code]" => "[source][geo][country_iso_code]"
                "[sophos-fw][sent_bytes]" => "[source][bytes]"
                "[sophos-fw][recv_pkts]" => "[source][packets]"
                "[sophos-fw][tran_src_port]" => "[source][nat][port]"

                "[sophos-fw][dst_ip]" => "[destination][ip]"
                "[sophos-fw][dst_port]" => "[destination][port]"
                "[sophos-fw][tran_dst_ip]" => "[destination][nat][ip]"
                "[sophos-fw][tran_dst_port]" => "[destination][nat][port]"
                "[sophos-fw][dst_mac]" => "[destination][mac]"
                "[sophos-fw][dst_country_code]" => "[destination][geo][country_iso_code]"
                "[sophos-fw][recv_bytes]" => "[destination][bytes]"
                "[sophos-fw][sent_pkts]" => "[destination][packets]"

                "[sophos-fw][device_name]" => "[observer][product]"
                "[sophos-fw][in_interface]" => "[observer][ingress][interface][name]"
                "[sophos-fw][out_interface]" => "[observer][egress][interface][name]"

                "[sophos-fw][log_id]" => "[event][id]"
                "[sophos-fw][log_subtype]" => "[event][type]"

                "[sophos-fw][fw_rule_id]" => "[rule][id]"
                "[sophos-fw][protocol]" => "[network][protocol]"

                "[sophos-fw][user_name]" => "[user][name]"
                "[sophos-fw][user_gp]" => "[user][group][name]"
            }
            lowercase => ["[event][type]"]
            remove_field => [
                "syslog_prio",
                "message",
                "structured_data",
                "tz_num",
                "parsed_timestamp",
                "[sophos-fw][date]",
                "[sophos-fw][time]",
                "[sophos-fw][timezone]"
            ]
        }
    }

    # meraki syslog to ECS
    if "meraki-ecs" in [tags] {
        # form 1: <134>1 1677085118.962677729 T1000 urls src=127.0.0.1:56630 dst=127.0.0.1:443 mac=FF:FF:FF:FF:FF:FF request: MSG
        # form 2: <134>1 1677085118.962677729 T1000 urls src=127.0.0.1:56630 dst=127.0.0.1:443 mac=FF:FF:FF:FF:FF:FF
        # form 3: <30>device="SFW" date=2023-02-22 time=10:20:28 timezone="EST" device_name="SFVH" device_id=foo
        grok {
            match => {
                message => [
                    "<%{INT:syslog_prio}>%{INT:no} %{NUMBER:ts} %{WORD:device} %{WORD:log_type} %{DATA:kvs} %{WORD:msg_prefix}: %{GREEDYDATA:msg}",
                    "<%{INT:syslog_prio}>%{INT:no} %{NUMBER:ts} %{WORD:device} %{WORD:log_type} %{GREEDYDATA:kvs}",
                    "<%{INT:syslog_prio}>%{GREEDYDATA:kvs}"
                ]
            }
        }

        if "_grokparsefailure" not in [tags] {
            mutate {
                add_field => {
                    "[event][severity]" => 3
                    "[event][category]" => "network"
                    "[event][provider]" => "meraki-ecs"
                    "[observer][vendor]" => "meraki-ecs"
                }
                remove_field => ["message"]
            }

            kv {
                source => "kvs"
                field_split_pattern => " "
                value_split => "="
                target => "meraki"
            }

            # parse form 1 and form 2 timestamps
            if ([ts]) {
                date {
                    match => [ "ts", "UNIX" ]
                    target => "@timestamp"
                }
            } else {
                # parse form 3 time
                mutate {
                    add_field => {
                        "combined_timestamp" => "%{[meraki][date]} %{[meraki][time]} %{[meraki][timezone]}"
                    }
                }
                date {
                    match => ["combined_timestamp", "yyyy-MM-dd HH:mm:ss ZZZ"]
                    target => "@timestamp"
                }
            }

            # build message for form 1
            if [msg_prefix] {
                mutate {
                    add_field => {
                        "message" => "%{msg_prefix}: %{msg}"
                    }
                }
            }

			#for form 1, 2 and 3
			#1.1.1.1:80
			if [meraki][src] =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+$/ {
				mutate {
					split => ["[meraki][src]", ":"]
					add_field => { "[source][ip]" => "%{[meraki][src][0]}"  }
					add_field => { "[source][port]" => "%{[meraki][src][1]}" }
					remove_field => [ "[meraki][src]" ]
				}
			}
			#"FF:FF:FF:FF:FF:FF"
			else if [meraki][src] =~ /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$/ {
				mutate {
					rename => {
						"[meraki][src]" => "[source][mac]"
						remove_field => [ "[meraki][src]" ]
					}
				}
			}
			else {
				mutate {
					rename => {
						"[meraki][src]" => "[source][ip]"
						"[meraki][sport]" => "[source][port]"
					}
				}
			}

			#1.1.1.1:80
			if [meraki][dst] =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+$/ {
				mutate {
					split => ["[meraki][dst]", ":"]
					add_field => { "[destination][ip]" => "%{[meraki][dst][0]}"  }
					add_field => { "[destination][port]" => "%{[meraki][dst][1]}" }
					remove_field => [ "[meraki][dst]" ]
				}
			}
			#"FF:FF:FF:FF:FF:FF"
			else if [meraki][dst] =~ /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$/ {
				mutate {
					rename => {
						"[meraki][dst]" => "[destination][mac]"
						remove_field => [ "[meraki][dst]" ]
					}
				}
			}
			else {
				mutate {
					rename => {
						"[meraki][dst]" => "[destination][ip]"
						"[meraki][dport]" => "[destination][port]"
					}
				}
			}


            # for form 1 and form 2
            if ([ts]) {
				#1.1.1.1:80
                if [meraki][translated_src_ip] =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+$/ {
                    mutate {
                        split => ["[meraki][translated_src_ip]", ":"]
                        add_field => { "[source][nat][ip]" => "%{[meraki][translated_src_ip][0]}"  }
                        add_field => { "[source][nat][port]" => "%{[meraki][translated_src_ip][1]}" }
                        remove_field => [ "[meraki][translated_src_ip]" ]
                    }
                }
				#"FF:FF:FF:FF:FF:FF"
				else if [meraki][translated_src_ip] =~ /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$/ {
					mutate {
						rename => {
							"[meraki][translated_src_ip]" => "[source][nat][mac]"
							remove_field => [ "[meraki][translated_src_ip]" ]
						}
					}
				}
                else
                {
                    mutate {
                        rename => {
                            "[meraki][translated_src_ip]" => "[source][nat][ip]"
                            "[meraki][translated_port]" => "[source][nat][port]"
                        }
                    }
                }



                mutate {
                    rename => {
                        "log_type" => "[service][name]"
                        "[meraki][protocol]" => "[network][protocol]"
                        "[meraki][mac]" => "[source][mac]"
                        "[meraki][agent]" => "[agent][name]"
                        "device" => "[observer][product]"
                    }
				}

            }
            else {
            # for form 3
				#1.1.1.1:80
                if [meraki][tran_src_ip] =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+$/  {
                    mutate {
                        split => ["[meraki][tran_src_ip]", ":"]
                        add_field => { "[source][nat][ip]" => "%{[meraki][tran_src_ip][0]}"  }
                        add_field => { "[source][nat][port]" => "%{[meraki][tran_src_ip][1]}" }
                        remove_field => [ "[meraki][tran_src_ip]" ]
                    }
                }
				#"FF:FF:FF:FF:FF:FF"
				else if [meraki][tran_src_ip] =~  /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$/{
					mutate {
						rename => {
							"[meraki][tran_src_ip]" => "[source][mac]"
							remove_field => [ "[meraki][tran_src_ip]" ]
						}
					}
				}
                else
                {
                    mutate {
                        rename => {
                            "[meraki][tran_src_ip]" => "[source][nat][ip]"
                            "[meraki][tran_src_port]" => "[source][nat][port]"
                        }
                    }
                }

				#1.1.1.1:80
                if [meraki][tran_dst_ip] =~  /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+$/ {
                    mutate {
                        split => ["[meraki][tran_dst_ip]", ":"]
                        add_field => { "[destination][nat][ip]" => "%{[meraki][tran_dst_ip][0]}"  }
                        add_field => { "[destination][nat][port]" => "%{[meraki][tran_dst_ip][1]}" }
                        remove_field => [ "[meraki][tran_dst_ip]" ]
                    }
                }
				#"FF:FF:FF:FF:FF:FF"
				else if [meraki][tran_dst_ip] =~  /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$/{
					mutate {
						rename => {
							"[meraki][tran_dst_ip]" => "[destination][mac]"
							remove_field => [ "[meraki][tran_dst_ip]" ]
						}
					}
				}
                else {
                    mutate {
                        rename => {
                            "[meraki][tran_dst_ip]" => "[destination][nat][ip]"
                            "[meraki][tran_dst_port]" => "[destination][nat][port]"
                        }
                    }
                }

                mutate {
                    rename => {
                        "[meraki][log_type]" => "[service][name]"
                        "[meraki][log_component]" => "[service][type]"
                        "[meraki][log_subtype]" => "[service][subtype]"
                        "[meraki][protocol]" => "[network][protocol]"
                        "[meraki][in_display_interface]" => "[observer][ingress][interface][name]"
                        "[meraki][out_display_interface]" => "[observer][egress][interface][name]"
                        "[meraki][duration]" => "[event][duration]"
                        "[meraki][log_id]" => "[event][id]"
                        "[meraki][src_mac]" => "[source][mac]"
                        "[meraki][sent_bytes]" => "[source][bytes]"
                        "[meraki-fw][src_country_code]" => "[source][geo][country_iso_code]"
                        "[meraki][dst_mac]" => "[destination][mac]"
                        "[meraki][recv_bytes]" => "[destination][bytes]"
                        "[meraki-fw][dst_country_code]" => "[destination][geo][country_iso_code]"
                        "[meraki][fw_rule_id]" => "[rule][id]"
                        "[meraki][fw_rule_name]" => "[rule][name]"
                        "[meraki][device]" => "[observer][product]"
                        "[meraki][device_name]" => "[observer][name]"
                        "[meraki][device_id]" => "[observer][serial_number]"
						"[meraki][agent]" => "[agent][name]"
                    }
                }
            }

            if [message] =~ /(?i)(?:unable to connect.*\b(?:\d{1,3}\.){3}\d{1,3}\b)/ {
                grok {
                    match => {
                        "message" => ["%{IP:[service][address]}"]
                        }
                }
                mutate {
                    add_field => {"[event][type]" => "denied"}
                    convert => {"[service][address]" => "string"}
                }
            }
            else if [message] =~ /(?i)(?:connected to server.*\b(?:\d{1,3}\.){3}\d{1,3}\b)/ {
                grok {
                    match => {
                        "message" => ["%{IP:[service][address]}"]
                        }
                }
                mutate {
                    add_field => {"[event][type]" => "allowed"}
                    convert => {"[service][address]" => "string"}
                }
            }

            mutate {
                remove_field => [
                    "syslog_prio",
                    "no",
                    "kvs",
                    "ts",
                    "combined_timestamp",
                    "msg_prefix",
                    "msg"
                ]
                rename => {
                    "message" => "[log][logger]"
                }
            }
        }
    }

	# Firepower syslog to ECS
    if "firepower-ecs" in [tags] {
        grok {
            match => {
                "message" => [
                    "<%{INT:syslog_prio}>%{WORD:FTD}%{SPACE}%{NOTSPACE:FTD_description}%{SPACE}%{GREEDYDATA:remaining}",
                    "%{WORD:FTD}%{SPACE}%{NOTSPACE:FTD_description}%{SPACE}%{GREEDYDATA:remaining}"
                ]
            }
        }
        if ([syslog_prio]) {
            # syslog prio case - should not be parsed as key value pairs. just a message
            # can be extended to parse it differently.

            grok {
                match => {
                    "remaining" => [
                        "%{YEAR}%{SPACE}%{TIME}:%{SPACE}%{NOTSPACE:device_id}:(?:%{SPACE})?%{GREEDYDATA:description}"
                    ]
                }
            }

            if [remaining] =~ /(?:ICMP|icmp)/ {
                #<166>Jul 03 2023 23:39:45: %ASA-6-302020: Built outbound ICMP connection for faddr 8.8.8.8/0 gaddr 1.1.1.1/20751 laddr 2.2.2.2/20751 type 8 code 0
                #<166>Jul 03 2023 23:39:45: %ASA-6-302021: Teardown ICMP connection for faddr 8.8.8.8/0 gaddr 1.1.1.1/20751 laddr 2.2.2.2/20751 type 8 code 0

                grok {
                    match => {
                        "description" => [
                            ".*faddr %{IPORHOST:faddr}/%{INT:faddr_port}%{SPACE}gaddr%{SPACE}%{IPORHOST:gaddr}/%{INT:gaddr_port}%{SPACE}laddr%{SPACE}%{IPORHOST:laddr}/%{INT:laddr_port}"
                        ]
                    }
                }

                mutate {
                    add_field => {
                        "[network][transport]" => "ICMP"
                    }
                    rename => {
                        "faddr" => "[destination][ip]"
                        "faddr_port" => "[destination][port]"
                        "gaddr" => "[source][ip]"
                        "gaddr_port" => "[source][port]"
                        "laddr" => "[client][ip]"
                        "laddr_port" => "[client][port]"
                        "device_id" => "[observer][product]"
                    }
                }
            }
            else if [remaining] =~ /(?:TCP|tcp)/ {
                #<164>Jul 04 2023 01:39:57: %ASA-4-106023: Deny tcp src outside:1.1.1.1/41132 dst MPLS-VRF-WAN2050:1.1.1.1/23 by access-group "outside_access_in" [0x2c1c6a65, 0x0]
                #<166>Jul 04 2023 01:39:56: %ASA-6-302014: Teardown TCP connection 213384149 for outside:7.7.7.7/443 to MPLS-VRF-WAN2050:1.1.1.1/52271 duration 0:00:00 bytes 9529 TCP FINs from MPLS-VRF-WAN2050
                #<166>Jul 04 2023 01:39:56: %ASA-6-302013: Built inbound TCP connection 213384153 for DMZ-520:1.1.1.1/53873 (172.22.67.24/53873) to MPLS-VRF-WAN2050:3.3.3.3/8027 (3.3.3.3/8027)
                #<166>Jul 04 2023 01:39:56: %ASA-6-302013: Built outbound TCP connection 213384151 for outside:5.5.5.5/443 (5.5.5.5/443) to MPLS-VRF-WAN2050:4.4.4.4/59030 (1.1.1.1/59030)
                #<166>Jul 04 2023 01:39:56: %ASA-6-305011: Built dynamic TCP translation from MPLS-VRF-WAN2050:6.6.6.6/56892 to outside:1.1.1.1/56892
                #<166>Jul 04 2023 01:39:54: %ASA-6-302014: Teardown TCP connection 213384110 for outside:10.10.10.10/443 to MPLS-VRF-WAN2050:1.1.1.1/59584 duration 0:00:00 bytes 5227 TCP FINs from MPLS-VRF-WAN2050
                #Deny TCP (no connection) from 5.5.5.5/443 to 1.1.1.1/61010 flags ACK  on interface outside
                grok {
                    match => {
                        "description" => [
                            #"ingress": "outside",
                            #"ingress_ip": "7.7.7.7",
                            #"ingress_port": 443,
                            #"egress": "MPLS-VRF-WAN2050",
                            #"egress_ip": "9.9.9.9",
                            #"egress_port": 52271
                            #<166>Jul 04 2023 01:39:56: %ASA-6-302014: Teardown TCP connection 213384149 for outside:7.7.7.7/443 to MPLS-VRF-WAN2050:9.9.9.9/52271 duration 0:00:00 bytes 9529 TCP FINs from MPLS-VRF-WAN2050
                            #<166>Jul 04 2023 01:39:56: %ASA-6-302013: Built inbound TCP connection 213384153 for DMZ-520:172.22.67.24/53873 (172.22.67.24/53873) to MPLS-VRF-WAN2050:4.4.4.4/8027 (4.4.4.4/8027)
                            #<166>Jul 04 2023 01:39:56: %ASA-6-302013: Built outbound TCP connection 213384151 for outside:5.5.5.5/443 (5.5.5.5/443) to MPLS-VRF-WAN2050:4.4.4.4/59030 (1.1.1.1/59030)
                            #<166>Jul 04 2023 01:39:54: %ASA-6-302014: Teardown TCP connection 213384110 for outside:10.10.10.10/443 to MPLS-VRF-WAN2050:1.1.1.1/59584 duration 0:00:00 bytes 5227 TCP FINs from MPLS-VRF-WAN2050
                            ".*for%{SPACE}%{HOSTNAME:ingress}:%{IP:ingress_ip}/%{INT:ingress_port}%{SPACE}.*to%{SPACE}%{HOSTNAME:egress}:%{IP:egress_ip}/%{INT:egress_port}",
                            #"ingress": "MPLS-VRF-WAN2050",
                            #"ingress_ip": "1.1.1.1",
                            #"ingress_port": 56892,
                            #"egress": "outside",
                            #"egress_ip": "1.1.1.1",
                            #"egress_port": 56892
                            #<166>Jul 04 2023 01:39:56: %ASA-6-305011: Built dynamic TCP translation from MPLS-VRF-WAN2050:1.1.1.1/56892 to outside:1.1.1.1/56892
                            ".*from%{SPACE}%{HOSTNAME:ingress}:%{IP:ingress_ip}/%{INT:ingress_port}%{SPACE}.*to%{SPACE}%{HOSTNAME:egress}:%{IP:egress_ip}/%{INT:egress_port}",

                            #"ingress": "MPLS-VRF-WAN2050",
                            #"ingress_ip": "1.1.1.1",
                            #"ingress_port": 56892,
                            #"egress": "outside",
                            #"egress_ip": "1.1.1.1",
                            #"egress_port": 56892
                            #<166>Jul 04 2023 01:39:56: %ASA-6-302014: Teardown TCP connection 213384149 for outside:7.7.7.7/443 to MPLS-VRF-WAN2050:9.9.9.9/52271 duration 0:00:00 bytes 9529 TCP FINs from MPLS-VRF-WAN2050
                            ".*src%{SPACE}%{HOSTNAME:ingress}:%{IP:ingress_ip}/%{INT:ingress_port}%{SPACE}.*dst%{SPACE}%{HOSTNAME:egress}:%{IP:egress_ip}/%{INT:egress_port}",

                            #"ingress_ip": "5.5.5.5",
                            #"ingress_port": 443,
                            #"egress_ip": "1.1.1.1",
                            #"egress_port": 61010
                            #<166>Jul 04 2023 02:21:47: %ASA-6-106015: Deny TCP (no connection) from 5.5.5.5/443 to 1.1.1.1/61010 flags ACK  on interface outside
                            ".*from%{SPACE}%{IP:ingress_ip}/%{INT:ingress_port}%{SPACE}.*to%{SPACE}%{IP:egress_ip}/%{INT:egress_port}"
                        ]
                    }
                }

                mutate {
                    add_field => {
                        "[network][transport]" => "TCP"
                    }
                    rename => {
                        "ingress" => "[observer][ingress][zone]"
                        "ingress_ip" => "[source][ip]"
                        "ingress_port" => "[source][port]"
                        "egress" => "[observer][egress][zone]"
                        "egress_ip" => "[destination][ip]"
                        "egress_port" => "[destination][port]"
                        "device_id" => "[observer][product]"
                    }
                }

            }
            else if [remaining] =~ /(?:UDP|udp)/ {
            #<166>Jul 04 2023 02:21:52: %ASA-6-302016: Teardown UDP connection 213424153 for VPN-TO-AZURE:10.2.0.7/64488 to MPLS-VRF-WAN2050:1.1.1.1/53 duration 0:00:00 bytes 222
            #<166>Jul 04 2023 02:21:52: %ASA-6-305011: Built dynamic UDP translation from MPLS-VRF-WAN2050:1.1.1.1/57764 to outside:1.1.1.1/57764
            #<166>Jul 04 2023 02:21:52: %ASA-6-302015: Built outbound UDP connection 213424154 for outside:1.1.1.1/53 (1.1.1.1/53) to MPLS-VRF-WAN2050:1.1.1.1/57764 (1.1.1.1/57764)
            #<166>Jul 04 2023 02:21:51: %ASA-6-302016: Teardown UDP connection 213424142 for outside:8.8.8.8/53 to MPLS-VRF-WAN2050:1.1.1.1/58478 duration 0:00:00 bytes 153
            #<166>Jul 04 2023 02:21:51: %ASA-6-305011: Built dynamic UDP translation from MPLS-VRF-WAN2050:1.1.1.1/58478 to outside:1.1.1.1/58478
            #<166>Jul 04 2023 02:21:49: %ASA-6-302015: Built inbound UDP connection 213424111 for outside:11.1.1.1/58969 (11.1.1.1/58969)(LOCAL\Qmatse) to MPLS-VRF-WAN2050:1.1.1.1/53 (1.1.1.1/53) (qmatse)
            #<164>Jul 04 2023 02:21:49: %ASA-4-106023: Deny udp src outside:1.1.1.1/47471 dst MPLS-VRF-WAN2050:172.22.58.40/6881 by access-group "outside_access_in" [0x2c1c6a65, 0x0]
                grok {
                    match => {
                        "description" => [
                            ".*for%{SPACE}%{HOSTNAME:ingress}:%{IP:ingress_ip}/%{INT:ingress_port}%{SPACE}.*to%{SPACE}%{HOSTNAME:egress}:%{IP:egress_ip}/%{INT:egress_port}",
                            ".*from%{SPACE}%{HOSTNAME:ingress}:%{IP:ingress_ip}/%{INT:ingress_port}%{SPACE}.*to%{SPACE}%{HOSTNAME:egress}:%{IP:egress_ip}/%{INT:egress_port}",
                            ".*src%{SPACE}%{HOSTNAME:ingress}:%{IP:ingress_ip}/%{INT:ingress_port}%{SPACE}.*dst%{SPACE}%{HOSTNAME:egress}:%{IP:egress_ip}/%{INT:egress_port}",
                            ".*from%{SPACE}%{IP:ingress_ip}/%{INT:ingress_port}%{SPACE}.*to%{SPACE}%{IP:egress_ip}/%{INT:egress_port}"
                        ]
                    }
                }

                mutate {
                    add_field => {
                        "[network][transport]" => "UDP"
                    }
                    rename => {
                        "ingress" => "[observer][ingress][zone]"
                        "ingress_ip" => "[source][ip]"
                        "ingress_port" => "[source][port]"
                        "egress" => "[observer][egress][zone]"
                        "egress_ip" => "[destination][ip]"
                        "egress_port" => "[destination][port]"
                        "device_id" => "[observer][product]"
                    }
                }
            }
        }
        else {
            kv {
                source => "remaining"
                id => "cisco-firepower-kv"
                field_split_pattern => ", "
                value_split => ":"
                # vs code prob. in the following line
                #trim_value => "\""
                tag_on_timeout => "timeout"
            }

            mutate{
                rename => {
                "DstIP" => "[destination][ip]"
                "DstPort" => "[destination][port]"
                "SrcIP" => "[source][ip]"
                "SrcPort" => "[source][port]"
                "Protocol" => "[network][transport]"
                "EgressInterface" => "[observer][egress][interface][name]"
                "IngressInterface" => "[observer][ingress][interface][name]"
                "InitiatorBytes" => "[source][bytes]"
                "ResponderBytes" => "[destination][bytes]"
                }
                convert => {
                    "[source][port]" => "integer"
                    "[destination][port]" => "integer"
                }
            }
        }

        # event.type selection
        if ("Allow" in [AccessControlRuleAction]) {
            mutate {
                add_field => {
                    "[event][type]" => "allowed"
                }
            }
        } else {
            mutate {
                add_field => {
                    "[event][type]" => "denied"
                }
            }
        }

        # make message field empty
        mutate {
            remove_field => ["message"]
        }

        mutate {
            ######################################################
            ###                Add core ECS fields             ###
            ######################################################
            add_field => {
                "[ecs][version]" => "1.5.0"
                "[event][kind]" => "event"
                "[event][category]" => "network"
                "[event][provider]" => "firepower"
                "[event][severity]" => 3
                "[observer][vendor]" => "firepower"
            }
            rename => {
                "description" => "[log][logger]"
            }

            remove_field => [
                "syslog_prio",
                "FTD",
                "FTD_description",
                "User",
                "remaining",
                "ConnectionDuration",
                "DNSQuery",
                "ResponderPackets",
                "ApplicationProtocol",
                "IngressZone",
                "Prefilter Policy",
                "InitiatorPackets",
                "AccessControlRuleName",
                "DNSRecordType",
                "DNS_TTL",
                "ACPolicy",
                "Client",
                "NAPPolicy",
                "EgressZone",
                "DeviceUUID",
                "AccessControlRuleAction",
                "@version"
            ]
        }
    }

	# Cisco-Switch syslog to ECS
    if "cisco-sw-ecs" in [tags] {
        grok {
            match => {
                "message" => [
                    "<%{INT:syslog_prio}>%{WORD}:%{SPACE}%{WORD}:%{SPACE}%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{WORD:time_zone}:%{SPACE}[%,*]%{NOTSPACE:event_code}:%{SPACE}%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_prio}>%{WORD}:%{SPACE}%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{WORD:time_zone}:%{SPACE}%{NOTSPACE:event_code}:%{SPACE}%{GREEDYDATA:remaining}"
                ]
            }
        }
        date {
            match => ["syslog_timestamp", "MMM dd HH:mm:ss.SSS"]
            timezone => "CET"
            target => "@timestamp"
        }

        # make message field empty
        mutate {
            remove_field => ["message"]
        }

        mutate {
            rename => {
                "remaining" => "message"
				"event_code" => "[event][code]"
            }
            add_field => {
                "[ecs][version]" => "1.5.0"
                "[event][kind]" => "event"
                "[event][category]" => "network"
                "[event][provider]" => "cisco-sw"
                "[event][severity]" => 3
                "[observer][vendor]" => "cisco-sw"
            }
            remove_field => [
                "syslog_prio",
                "time_zone",
                "syslog_timestamp",
                "remaining"
            ]
        }
    }

	# Cisco-vWLC syslog to ECS
    if "cisco-wlc-ecs" in [tags] {
        grok {
            match => {
                "message" => [
                    "<%{INT:syslog_prio}>%{WORD}:%{SPACE}%{WORD}:%{SPACE}%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{WORD:time_zone}:%{SPACE}[%,*]%{NOTSPACE:event_code}:%{SPACE}%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_prio}>%{WORD}:%{SPACE}%{NOTSPACE}%{SPACE}%{SYSLOGTIMESTAMP:syslog_timestamp}:%{SPACE}[%,*]%{NOTSPACE:event_code}:%{SPACE}%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_prio}>%{WORD}:%{SPACE}%{GREEDYDATA:remaining}"
                ]
            }
        }
        if([time_zone]) {
            date {
                match => ["syslog_timestamp", "MMM dd HH:mm:ss.SSS"]
                timezone => "CET"
                target => "@timestamp"
            }
        } else {
            date {
                match => ["syslog_timestamp", "MMM dd HH:mm:ss.SSS"]
                target => "@timestamp"
            }
        }

        # make message field empty
        mutate {
            remove_field => ["message"]
        }

        mutate {
            rename => {
                "remaining" => "message"
                "event_code" => "[event][code]"
            }
            add_field => {
                "[ecs][version]" => "1.5.0"
                "[event][kind]" => "event"
                "[event][category]" => "network"
                "[event][provider]" => "cisco-wlc"
                "[event][severity]" => 3
                "[observer][vendor]" => "cisco-wlc"
            }
            remove_field => [
                "syslog_prio",
                "time_zone",
                "syslog_timestamp",
                "remaining"
            ]
        }
    }

	# NetApp Storage syslog to ECS
    if "netapp-storage-ecs" in [tags] {
        grok {
            match => {
                "message" => [
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{WORD}%{SPACE}%{WORD:month}%{SPACE}%{WORD:day}%{SPACE}%{WORD:year}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}::%{SPACE}%{NOTSPACE}%{SPACE}::%{SPACE}%{IPV4:src_ip}:%{NUMBER:src_port}%{SPACE}::%{SPACE}%{NOTSPACE}%{SPACE}::%{SPACE}%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{GREEDYDATA:remaining}"
                ]
            }
        }
        date {
            match => ["syslog_timestamp", "MMM dd HH:mm:ss"]
            target => "@timestamp"
        }
        mutate {
            rename => {
                "remaining" => "message"
                "src_port" => "[source][port]"
                "src_ip" => "[source][ip]"
            }
            add_field => {
                "[ecs][version]" => "1.5.0"
                "[event][kind]" => "event"
                "[event][severity]" => 3
                "[event][category]" => "network"
                "[event][provider]" => "netapp-storage-ecs"
                "[observer][vendor]" => "netapp-storage-ecs"
            }
            remove_field => [
                "syslog_prio",
                "time_zone",
                "syslog_timestamp",
                "remaining",
                "month",
                "day",
                "year"
            ]
        }
    }

	# Aruba-Switch syslog to ECS
    if "aruba-switch-ecs" in [tags] {
        grok {
            match => {
                "message" => [
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{IP:src_ip}%{SPACE}%{GREEDYDATA:remaining}"
                ]
            }
        }

        if [message] =~ "auth:  User" {
            grok {
            match => {
                "message" => [
                    #Sep 26, 2023 @ 07:50:17.497	<14>Sep 26 09:50:06192.168.0.1 03362 auth:  User 'randomizedusername' logged in from 192.168.0.2 to WEB_UI session
                    #Sep 26, 2023 @ 07:29:45.934	<14>Sep 26 07:29:21192.168.0.1 03362 auth:  User 'randomizedusername' logged in from 192.168.0.2 to TELNET session
                    ".*auth:%{SPACE}User%{SPACE}\'%{USER:username}\'%{SPACE}(?<action>(logged in))%{SPACE}from%{SPACE}%{IPV4:logged_ip}%{SPACE}to%{SPACE}%{NOTSPACE:session}%{SPACE}%{GREEDYDATA}",

                    #Sep 26, 2023 @ 14:11:32.203	<14>Sep 26 16:11:22192.168.0.1 03363 auth:  User 'randomizedusername' logged out of TELNET session from 192.168.0.2
                    #Sep 26, 2023 @ 07:34:33.282	<14>Sep 26 09:34:21192.168.0.1 03363 auth:  User 'randomizedusername' logged out of WEB_UI session from 192.168.0.2
                    ".*auth:%{SPACE}User%{SPACE}\'%{USER:username}\'%{SPACE}(?<action>(logged out))%{SPACE}of%{SPACE}%{NOTSPACE:session}%{SPACE}session%{SPACE}from%{SPACE}%{IPV4:logged_ip}",

                    #Sep 26, 2023 @ 08:16:37.745	<14>Sep 26 10:16:21 192.168.0.1 03387 auth:  User 'randomizedusername' has been logged out from 192.168.0.2 due to session timeout
                    ".*auth:%{SPACE}User%{SPACE}\'%{USER:username}\'%{SPACE}has%{SPACE}been%{SPACE}(?<action>(logged out))%{SPACE}from%{SPACE}%{IPV4:logged_ip}%{SPACE}due%{SPACE}to%{SPACE}%{GREEDYDATA:session}"
                    ]
                }
            }
            mutate {
                rename => {
                    "username" => "[user][name]"
                    "action" => "[event][action]"
                    "logged_ip" => "[destination][ip]"
                    "session" => "[service][name]"
                }
            }
        }
        date {
            match => ["syslog_timestamp", "MMM dd HH:mm:ss"]
            target => "@timestamp"
        }
        mutate {
            rename => {
			    "remaining" => "[log][logger]"
                "src_ip" => "[source][ip]"
            }
            add_field => {
                "[ecs][version]" => "1.5.0"
                "[event][kind]" => "event"
                "[event][severity]" => 3
                "[event][category]" => "network"
                "[event][provider]" => "aruba-switch-ecs"
                "[observer][vendor]" => "aruba-switch-ecs"
            }
            remove_field => [
                "syslog_prio",
                "syslog_timestamp",
                "remaining"
            ]
        }
    }

	# IBM 3PAR Storage to ECS
     if "ibm-3par-storage-ecs" in [tags] {
        grok {
            match => {
                "message" => [
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{WORD}:%{INT}:%{IP:src_ip}:%{NUMBER:src_port}:%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{WORD}:%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{WORD}%{SPACE}{%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}{{%{NUMBER}%{SPACE}%{NUMBER}}}%{SPACE}%{NUMBER}%{SPACE}%{IP:src_ip}:%{NUMBER:src_port}%{SPACE}%{WORD}}%{SPACE}%{GREEDYDATA:remaining}"
                ]
            }
        }
        date {
            match => ["syslog_timestamp", "MMM dd HH:mm:ss"]
            target => "@timestamp"
        }
        mutate {
            rename => {
                "remaining" => "message"
                "src_ip" => "[source][ip]"
                "src_port" => "[source][port]"
            }
            add_field => {
                "[ecs][version]" => "1.5.0"
                "[event][kind]" => "event"
                "[event][severity]" => 3
                "[event][category]" => "network"
                "[event][provider]" => "ibm-3par-storage-ecs"
                "[observer][vendor]" => "ibm-3par-storage-ecs"
            }
            remove_field => [
                "syslog_prio",
                "syslog_timestamp",
                "remaining"
            ]
        }
    }

    # IBM AS400 to ECS
     if "ibm-as400-ecs" in [tags] {
        grok {
            match => {
                "message" => [
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{GREEDYDATA:remaining}"
                ]
            }
        }
        date {
            match => ["syslog_timestamp", "MMM dd HH:mm:ss"]
            target => "@timestamp"
        }
        mutate {
            rename => {
                "remaining" => "message"
            }
            add_field => {
                "[ecs][version]" => "1.5.0"
                "[event][kind]" => "event"
                "[event][severity]" => 3
                "[event][category]" => "network"
                "[event][provider]" => "ibm-as400-ecs"
                "[observer][vendor]" => "ibm-as400-ecs"
            }
            remove_field => [
                "syslog_prio",
                "syslog_timestamp",
                "remaining"
            ]
        }
    }

    # QNAP NAS to ECS
    if "qnap-nas-ecs" in [tags] {
        grok {
            match => {
                "message" => [
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}((?<user>[^,]*))%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}((?<ip>[^,]*))%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}((?<application>[^,]*))%{SPACE}%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}((?<category>[^,]*))%{NOTSPACE}%{SPACE}%{NOTSPACE}%{SPACE}%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{GREEDYDATA:remaining}"
                ]
            }
        }
        date {
            match => ["syslog_timestamp", "MMM dd HH:mm:ss"]
            target => "@timestamp"
        }
        mutate {
            rename => {
                "user" => "[user][name]"
                "ip" => "[source][ip]"
                "application" => "[service][name]"
                "category" => "[service][type]"
                "remaining" => "message"
            }
            add_field => {
                "[ecs][version]" => "1.5.0"
                "[event][kind]" => "event"
                "[event][severity]" => 3
                "[event][category]" => "storage"
                "[event][provider]" => "qnap-nas-ecs"
                "[observer][vendor]" => "qnap-nas-ecs"
            }
            remove_field => [
                "syslog_prio",
                "syslog_timestamp",
                "remaining"
            ]
        }
    }

    # Nutanix ECS
    if "nutanix-ecs" in [tags] {
        grok {
            match => {
                "message" => [
                    "<%{INT:syslog_prio}>%{TIMESTAMP_ISO8601:syslog_timestamp} %{HOSTNAME:hostname} %{WORD:program}\[%{NUMBER:pid}\]: node=%{DATA:node} type=%{WORD:action} msg=%{WORD}\(%{NUMBER}:%{NUMBER}\):%{SPACE}%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_pri}>%{TIMESTAMP_ISO8601:syslog_timestamp} %{HOSTNAME:hostname} %{WORD:program}\[%{NUMBER:pid}\]: node=%{DATA:node} type=%{WORD:type} msg=%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_pri}>%{TIMESTAMP_ISO8601:syslog_timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{WORD:program}:%{SPACE}%{WORD:node}%{SPACE}%{SPACE}((?<log_timestamp>\d{2}:\d{2}:\d{2}\.\d{6}\w))%{SPACE}%{INT:pid}%{SPACE}%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_pri}>%{TIMESTAMP_ISO8601:syslog_timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{DATA:program}:%{SPACE}%{WORD:log_level}%{SPACE}\[%{WORD:node}\]%{SPACE}%{TIMESTAMP_ISO8601}%{NOTSPACE}%{INT}%{NOTSPACE}%{SPACE}%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_pri}>%{TIMESTAMP_ISO8601:syslog_timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{DATA:program}:%{SPACE}%{WORD:node}%{SPACE}%{SPACE}((?<log_timestamp>\d{2}:\d{2}:\d{2}\.\d{6}\w))%{SPACE}%{INT:pid}%{SPACE}%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_pri}>%{TIMESTAMP_ISO8601:syslog_timestamp} %{HOSTNAME:hostname} %{WORD:program}(?:\[%{NUMBER:pid}\])?: %{GREEDYDATA:remaining}",

                    #<134>2023-04-22T11:39:39.694569+00:00 FDC1NTX06 flow-hitCount1: INFO:2023/04/22 11:39:15  [94bb671a-7b64-4b9b-9ae7-568b543d6744] VISTA_ONBOARDING [Update] SRC=10.192.5.2 DST=20.72.96.146 PROTO=TCP SPORT=49973 DPORT=443 ACTION=ALLOW DIRECTION=OUTBOUND ORIG: PKTS=2 BYTES=104 REPLY: PKTS=0 BYTES=0
                    #<134>2023-04-22T11:39:38.798804+00:00 FDC1NTX04 flow-hitCount2: INFO:2023/04/22 11:39:28  [1e287f30-33d6-4f97-9fd0-2e8fd02354dd] VISTA_RECRUITING [Update] SRC=10.192.2.11 DST=10.192.32.13 PROTO=UDP SPORT=64722 DPORT=53 ACTION=ALLOW DIRECTION=OUTBOUND ORIG: PKTS=1 BYTES=69 REPLY: PKTS=1 BYTES=278
                    #<134>2023-04-22T11:37:37.980386+00:00 FDC1NTX05 flow-hitCount2: INFO:2023/04/22 11:37:09  [74c30ea9-d7e1-4d30-8518-62b379d21873] PDL_Nice_Label [Update] SRC=10.216.32.32 DST=10.192.112.10 PROTO=TCP SPORT=55259 DPORT=2074 ACTION=MONITOR DIRECTION=OUTBOUND ORIG: PKTS=334 BYTES=22199 REPLY: PKTS=333 BYTES=20562
                    #<134>2023-04-22T11:38:19.613757+00:00 FDC1NTX06 flow-hitCount2: INFO:2023/04/22 11:38:15  [94bb671a-7b64-4b9b-9ae7-568b543d6744] VISTA_ONBOARDING [Update] SRC=10.192.5.2 DST=10.192.112.10 PROTO=TCP SPORT=65059 DPORT=2074 ACTION=ALLOW DIRECTION=OUTBOUND ORIG: PKTS=476 BYTES=30436 REPLY: PKTS=474 BYTES=26626 DESCRIPTION=NGT
                    #<134>2023-04-22T11:39:39.694569+00:00 FDC1NTX06 flow-hitCount1: INFO:2023/04/22 11:39:15  [94bb671a-7b64-4b9b-9ae7-568b543d6744] VISTA_ONBOARDING [Update] SRC=10.192.5.2 DST=20.72.96.146 PROTO=TCP SPORT=49973 DPORT=443 ACTION=ALLOW DIRECTION=OUTBOUND ORIG: PKTS=2 BYTES=104 REPLY: PKTS=0 BYTES=0
                    "<%{INT:syslog_prio}>%{TIMESTAMP_ISO8601:syslog_timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{PROG:program}:%{SPACE}%{WORD:log_level}:%{YEAR}/%{MONTHDAY}/%{YEAR}%{SPACE}%{TIME}%{SPACE}\[%{NOTSPACE:service_ephemeral_id}\]%{SPACE}%{WORD:node}%{SPACE}\[%{WORD:service_state}\]%{SPACE}%{GREEDYDATA:remaining}",

                    #<132>2023-04-22T11:39:30.644971+00:00 FDC2NTX22 flow_service_logs-conntrack_stat E0422 11:39:09.701074   19003 scanner.go:228] Scanner: no policy configured for logging
                    "<%{INT:syslog_prio}>%{TIMESTAMP_ISO8601:syslog_timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{PROG:program}%{SPACE}%{WORD:node}%{SPACE}%{GREEDYDATA:remaining}"
                ]
            }
        }
        date {
            match => ["syslog_timestamp", "yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ", "ISO8601", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss,SSS"]
            target => "@timestamp"
        }
        kv {
            source => "remaining"
            value_split => "="
            target => "nutanix"
            trim_key => " "
        }
        mutate {
            rename => {
                "hostname" => "[host][hostname]"
                "program" => "[service][name]"
                "pid" => "[service][id]"
                "node" =>"[service][node][name]"
                "action" => "[event][action]"
                "log_level" => "[log][level]"
                "service_ephemeral_id" => "[service][ephemeral_id]"
                "service_state"=> "[service][state]"
            }
            add_field => {
                "[ecs][version]" => "1.5.0"
                "[event][kind]" => "event"
                "[event][severity]" => 3
                "[event][category]" => "network"
                "[event][provider]" => "nutanix-ecs"
                "[observer][vendor]" => "nutanix-ecs"
            }
            remove_field => [
                "syslog_prio",
                "syslog_timestamp",
                "remaining",
                "log_timestamp",
                "message"
            ]
        }
    }

    #Mellanox
    if "mellanox-ecs" in [tags] {
        grok {
            match => {
                "message" => [
                    #"syslog_prio": 166,
                    #"app_name": "hwd",
                    #"pid": 2564,
                    #"service_name": "TID",
                    #"service_number": 140544728577856,
                    #"log_type": "INFO",
                    #"message": "hwd_db_get_elements_by_type: Checking NRU:[0] "
                    #<166>hwd[2564]: TID 140544728577856: [hwd.INFO]: hwd_db_get_elements_by_type: Checking NRU:[0]
                    #<190>snmpd[8291]: TID 139636320814848: [snmpd.INFO]: Done refreshing cache for table 'mellanoxIfVPITable', got 23 row(s)
                    "<%{INT:syslog_prio}>%{WORD:app_name}\[%{NUMBER:pid}\]:%{SPACE}%{WORD:service_name}%{SPACE}%{NUMBER:service_number}:%{SPACE}\[%{WORD}.%{PROG:log_type}\]:%{SPACE}%{GREEDYDATA:message}",


                    #"syslog_prio": 174,
                    #"app_name": "mgmtd",
                    #"pid": 1301,
                    #"log_type": "INFO",
                    #"message": "Sending externally: type query_request session 6 id 375375888 peer tvirtd-2299 with 60-second async timeout"
                    #<174>mgmtd[1301]: [mgmtd.INFO]: Received message: type query_response session 38 id 15420450 to 375375890
                    #<174>mgmtd[1301]: [mgmtd.INFO]: Sending externally: type query_request session 6 id 375375888 peer tvirtd-2299 with 60-second async timeout
                    #<166>mibd[2361]: [mibd.INFO]: Mibd received a monitor iterate request for node: /public/snmp/if_vpi/mellanoxIfVPITable
                    #<182>clusterd[3062]: [clusterd.INFO]: dnode resolve reply: name mlnx1-98039B0CDBA6 type _tcn_prc-mlag-vip-domain._tcp. domain local. addr 192.168.200.21 port 60102 ifindex 3
                    "<%{INT:syslog_prio}>%{WORD:app_name}\[%{NUMBER:pid}\]:%{SPACE}%{SPACE}\[%{WORD}.%{PROG:log_type}\]:%{SPACE}%{GREEDYDATA:message}",

                    #"pid": 1679780479.8816867,
                    #"app_name": "Tierpoint",
                    #"service_name": "vpn_firewall",
                    #"src_ip": "10.3.24.22",
                    #"dst_ip": "10.3.0.21",
                    #"protocol": "tcp",
                    #"source_port": 58305,
                    #"destination_port": 80,
                    #"remaining": "pattern: allow all"
                    #<134>1 1679780479.881686676 Tierpoint vpn_firewall src=10.3.24.22 dst=10.3.0.21 protocol=tcp sport=58305 dport=80 pattern: allow all
                    #<134>1 1679780479.871187012 Tierpoint vpn_firewall src=10.3.16.23 dst=10.3.0.30 protocol=tcp sport=62009 dport=445 pattern: allow all
                    "<%{INT:syslog_prio}>%{INT}%{SPACE}%{PROG:pid}%{SPACE}%{WORD:app_name}%{SPACE}%{PROG:service_name}%{SPACE}src=%{IPV4:src_ip}%{SPACE}dst=%{IP:dst_ip}%{SPACE}protocol=%{WORD:protocol}%{SPACE}sport=%{INT:source_port}%{SPACE}dport=%{INT:destination_port}%{SPACE}%{GREEDYDATA:remaining}",

                    #<166>last message repeated 2 times
                    "<%{INT:syslog_prio}>%{GREEDYDATA:remaining}"
                ]
            }
        }

        mutate {
            rename => {
                "pid" => "[service][id]"
                "app_name" => "[service][name]"
                "service_name" => "[service][node][name]"
                "service_number" => "[service][ephemeral_id]"
                "src_ip" => "[source][ip]"
                "dst_ip" => "[destination][ip]"
                "protocol" => "[network][transport]"
                "source_port" => "[source][port]"
                "destination_port" => "[destination][port]"
                "log_level" => "[log][level]"
                "remaining" => "message"
            }
            add_field => {
                "[ecs][version]" => "1.5.0"
                "[event][kind]" => "event"
                "[event][severity]" => 3
                "[event][category]" => "network"
                "[event][provider]" => "mellanox-ecs"
                "[observer][vendor]" => "mellanox-ecs"
            }
            remove_field => [
                "syslog_prio"
            ]
        }
    }

	if "zimperium-ecs" in [tags] {

        grok {
			match => {
				"message" => [
				"(?:%{INT}%{SPACE})?<%{INT:syslog_prio}>(?:%{INT}%{SPACE})?%{SPACE}%{TIMESTAMP_ISO8601:syslog_timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{WORD:export_type}%{SPACE}%{NOTSPACE}%{SPACE}%{WORD:service_name}%{SPACE}%{NOTSPACE}%{SPACE}%{GREEDYDATA:log_json}"
				]
			}
		}

		date {
            match => ["syslog_timestamp", "yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ", "ISO8601", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss,SSS"]
            target => "@timestamp"
        }

		json {
			source => "log_json"
			target => "zimperium"
			ecs_compatibility => v1
		}

		if ([zimperium][forensics][general]) {

			split {
				field => "[zimperium][forensics][general]"
				target => "[zimperium][forensics][default]"
			}
			mutate {
				remove_field => ["[zimperium][forensics][general]"]
			}
		}

		if ([zimperium][forensics][out_of_compliance_app][policy_details]) {

			split {
				field => "[zimperium][forensics][out_of_compliance_app][policy_details]"
				target => "[zimperium][forensics][out_of_compliance_app][policies_details]"
			}
			mutate {
				remove_field => ["[zimperium][forensics][out_of_compliance_app][policy_details]"]
			}
		}



		mutate {
			add_field => {
				"[event][kind]" => "event"
				"[event][category]" => "application"
				"[event][provider]" => "zimperium-ecs"
				"[observer][vendor]" => "zimperium-ecs"
			}

			remove_field => ["syslog_prio", "log_json","syslog_timestamp"]

			rename => {
				"service_name" => "[service][name]"
				"hostname" => "[host][hostname]"
				"export_type" => "[service][node][name]"
			}

			capitalize => ["[zimperium][device_info][os]"]
		}

        #check if contains ip
		if [zimperium][action] =~ /\b(?:\d{1,3}\.){3}\d{1,3}\b/ {

			grok {
				match => {
					"[zimperium][action]" => "%{IPV4:ip}"
				}
			}

			mutate {
				rename => {"ip" => "[zimperium][action_ip]"  }
				gsub => ["[zimperium][action]", "\b(?:\d{1,3}\.){3}\d{1,3}\b", ""]
				strip => ["[zimperium][action]", "[zimperium][action_ip]"]
			}
		}

		#remove empty fields
		ruby {
            init => "
                def removeEmptyField(event,h,name)
                    h.each do |k,v|
                            if (v.is_a?(Hash) || v.is_a?(Array)) && v.to_s != '{}' && v.to_s != '[]'
                                removeEmptyField(event,v,String.new(name.to_s) << '[' << k.to_s << ']')
                            else
                            if v == '' || v.to_s == '{}' || v == nil || v == 'null' || v.to_s == '[]' || v == '[]' ||  v == '{}' || v.to_s.length == 0
                                event.remove(String.new(name.to_s) << '[' << k.to_s << ']')
                            end
                        end
                    end
                end
            "
            code => "
                removeEmptyField event,event.to_hash,''
            "
		}
	}

    if "juniper-ecs" in [tags]
    {
		grok {
			match => {
				"message" => [
				"<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{WORD:[service][node][name]}(?:\[%{NUMBER:[service][ephemeral_id]}\])?:%{SPACE}%{GREEDYDATA:remaining}",
				"<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{DATA:[service][node][name]}(?:\[%{NUMBER:[service][ephemeral_id]}\])?:%{SPACE}%{GREEDYDATA:remaining}",
				"<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{GREEDYDATA:remaining}"
				]
			}
		}

        date {
            match => ["syslog_timestamp", "MMM dd HH:mm:ss"]
            target => "@timestamp"
        }

        if [remaining] =~ "RT_FLOW_SESSION_CREATE" {
            grok {
                match => {
					"remaining" => [
						".*session created%{SPACE}%{IP:src_addr}/%{INT:src_port}->%{IP:dst_addr}/%{INT:dst_port}%{SPACE}(?:%{WORD}%{SPACE})?%{HOSTNAME:service_name}%{SPACE}%{IP:nat_src_ip}/%{INT:nat_src_port}->%{IP:nat_dst_ip}/%{INT:nat_dst_port}%{SPACE}%{NOTSPACE:src_nat_rule_name}%{SPACE}%{NOTSPACE:dst_nat_rule_name}%{SPACE}%{INT:protocol_id}%{SPACE}%{NOTSPACE:policy_name}%{SPACE}%{NOTSPACE:from_zone}%{SPACE}%{NOTSPACE:to_zone}%{SPACE}%{INT:session_id}%{SPACE}%{GREEDYDATA:description}"
					]
				}
            }

            mutate {
                rename => {
                    "src_addr" => "[source][ip]"
                    "src_port" => "[source][port]"
                    "dst_addr" => "[destination][ip]"
                    "dst_port" => "[destination.port]"
                    "service_name" => "[service][name]"
                    "nat_src_ip" => "[source][nat][ip]"
                    "nat_src_port" => "[source][nat][port]"
                    "nat_dst_ip" => "[destination][nat][ip]"
                    "nat_dst_port" => "[destination][nat][port]"
                    "src_nat_rule_name" => "[observer][ingress][interface][name]"
                    "dst_nat_rule_name" => "[observer][egress][interface][name]"
                    "protocol_id" => "[network][protocol]"
                    "policy_name" => "[rule][name]"
                    "from_zone" => "[observer][ingress][zone]"
                    "to_zone" => "[observer][egress][zone]"
                    "session_id" => "[service][id]"
                }
				add_field => {
					"[service][node][type]" => "RT_FLOW_SESSION_CREATE"
				}
            }
        }
        else if [remaining] =~ "RT_FLOW_SESSION_DENY" {

            grok{
                match => {
					"remaining" => [
						".*session denied %{IP:src_addr}/%{DATA:src_port}->%{IP:dst_addr}/%{DATA:dst_port} %{DATA:service_name} %{INT:protocol_id}\(\d\) %{DATA:policy_name} %{DATA:from_zone} %{DATA:to_zone}%{SPACE}%{GREEDYDATA:description}"
					]
				}
            }

            mutate {
                rename => {
                    "src_addr" => "[source][ip]"
                    "src_port" => "[source][port]"
                    "dst_addr" => "[destination][ip]"
                    "dst_port" => "[destination.port]"
                    "service_name" => "[service][name]"
                    "protocol_id" => "[network][protocol]"
                    "policy_name" => "[rule][name]"
                    "from_zone" => "[observer][ingress][zone]"
                    "to_zone" => "[observer][egress][zone]"
                }

				add_field => {
					"[service][node][type]" => "RT_FLOW_SESSION_DENY"
				}

            }
        }
        else if [service][node][name] =~ "kmd" {

			grok{
                match => {
					"remaining" => [
						"((?<[service][node][type]>.*KMD_PM_SA_ESTABLISHED))\:%{SPACE}%{GREEDYDATA:kv_section}",
						".*IKE negotiation failed with error: No proposal chosen.%{SPACE}%{GREEDYDATA:kv_section}",
						"%{GREEDYDATA:kv_section}"
					]
				}
            }

			kv {
                source => "kv_section"
                value_split => ":"
                trim_key => " "
                field_split_pattern => ", "
                target => "juniper"
            }
        }
		else
		{
			mutate {
                rename => {
                    "remaining" => "description"
                }
			}
		}

        mutate {
            add_field => {
                    "[ecs][version]" => "1.5.0"
                    "[event][kind]" => "event"
                    "[event][category]" => "firewall"
                    "[event][provider]" => "juniper-ecs"
                    "[observer][vendor]" => "juniper-ecs"
            }
            remove_field => ["syslog_prio","syslog_timestamp","remaining","kv_section"]
        }
    }

	if "thor-ecs" in [tags] {
        grok {
			match => {
				"message" => [
                    "<%{INT:syslog_prio}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{GREEDYDATA:hostname}%{SPACE}THOR:%{SPACE}%{WORD:log_level}:%{SPACE}%{GREEDYDATA:remaining}"
                		]
			}
		}

        date {
            match => ["syslog_timestamp", "MMM dd HH:mm:ss"]
            target => "@timestamp"
        }

        kv {
            source => [ "remaining" ]
            remove_char_value => "'"
            recursive => true
            allow_empty_values => false
            target => "thor"
        }

		if ([thor][IP] == "::") {
			mutate {
				remove_field => ["[thor][IP]"]
			}
		}

		mutate {
			add_field => {
				"[event][kind]" => "event"
				"[event][category]" => "firewall"
				"[event][provider]" => "thor-ecs"
				"[observer][vendor]" => "thor-ecs"
			}
            rename => {
                "log_level" => "[log][level]"
                "message" => "[log][logger]"
				"hostname" => "[host][hostname]"
            }

			remove_field => ["syslog_prio","syslog_timestamp","remaining"]
        }
    }

	if "fortianalyzer-cef" in [tags] {
        grok {
			match => {
				"message" => [
                    "%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{GREEDYDATA:cef_message}%{SPACE}tz=%{GREEDYDATA:stamp}",
                    "%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{GREEDYDATA:cef_message}%{SPACE}"
                	]
			}
		}

        date {
            match => ["syslog_timestamp", "MMM dd HH:mm:ss", "MMM  dd HH:mm:ss"]
            target => "@timestamp"
        }
        mutate {
            split => ["cef_message", "|"]
            add_field => { "cef_version" => "%{[cef_message][0]}" }
            add_field => { "cef_device_vendor" => "%{[cef_message][1]}" }
            add_field => { "cef_device_product" => "%{[cef_message][2]}" }
            add_field => { "cef_device_version" => "%{[cef_message][3]}" }
            add_field => { "cef_sig_id" => "%{[cef_message][4]}" }
            add_field => { "cef_sig_name" => "%{[cef_message][5]}" }
            add_field => { "cef_sig_severity" => "%{[cef_message][6]}" }
            add_field => { "cef_kv_message" => "%{[cef_message][7]}" }
        }
		mutate {
            gsub => ["cef_kv_message", "(\S+=)", ", \1"]
			rename => {"hostname" => "[host][hostname]"}
            add_field => {
				"[event][kind]" => "event"
				"[event][category]" => "network"
				"[event][provider]" => "fortianalyzer-ecs"
				"[observer][vendor]" => "fortianalyzer-ecs"
			}
            remove_field => ["[event][original]"]
		}
		kv {
		    remove_char_key => "\."
            source => "cef_kv_message"
            trim_value => " "
            trim_key => " "
            value_split => "="
            field_split => ","
            target => "fortianalyzer"
            remove_field => ["cef_kv_message", "message", "cef_message", "stamp"]
            remove_tag => ["kv_section"]
        }
    }

	if "ubiquiti-ecs" in [tags] {
        grok {
			match => {
				"message" => [
                    "<%{INT:syslog_priority}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{HOSTNAME:device}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{DATA:service}\[%{NUMBER}\]:%{SPACE}%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_priority}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{HOSTNAME:device}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{HOSTNAME:service}\:%{SPACE}%{GREEDYDATA:remaining}",
                    "<%{INT:syslog_priority}>%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{HOSTNAME:device}%{SPACE}(?:\[%{DATA:service}\])?%{SPACE}%{GREEDYDATA:kv_section}"
                	]
			}
		}

        date {
            match => ["syslog_timestamp", "MMM dd HH:mm:ss", "MMM  dd HH:mm:ss"]
            target => "@timestamp"
        }

        if ([kv_section]) {

            kv {
                source => [ "kv_section" ]
                trim_value => '"'
                value_split => "="
                recursive => true
                allow_empty_values => false
                target => "ubiquiti"
            }
            mutate {
			add_field => {
				"[event][kind]" => "event"
				"[event][category]" => "network"
				"[event][provider]" => "ubiquiti-ecs"
				"[observer][vendor]" => "ubiquiti-ecs"
			}
            rename => {
                "device" => "[observer][product]"
				"service" => "[service][name]"
                "remaining" => "[log][logger]"
            }
            remove_field => ["syslog_priority","syslog_timestamp","remaining","kv_section"]
            }

        }
        else {
            mutate {
                add_field => {
                    "[event][kind]" => "event"
                    "[event][category]" => "network"
                    "[event][provider]" => "ubiquiti-ecs"
                    "[observer][vendor]" => "ubiquiti-ecs"
                }
                rename => {
                    "hostname" => "[host][hostname]"
                    "device" => "[observer][product]"
                    "service" => "[service][name]"
                    "remaining" => "[log][logger]"
                }
                remove_field => ["syslog_priority","syslog_timestamp","remaining","kv_section"]
            }
        }
    }

    if "kemp-ecs" in [tags]
    {
        grok {
			match => {
				"message" => [
				"<%{INT:syslog_priority}>%{DATA:service_id}:%{SPACE}(?:\*)?%{DATA:log_source}:%{SPACE}(?:\*)?%{SYSLOGTIMESTAMP:syslog_timestamp}:%{SPACE}(?:\%)?((?<interface>[^:]+)):%{SPACE}%{GREEDYDATA:remaining}",
				"<%{INT:syslog_priority}>(?:%{INT})?%{SPACE}%{TIMESTAMP_ISO8601}%{SPACE}%{WORD:device_model_name}%{SPACE}%{HOSTNAME:service_id}.*meta sequenceId=\"%{NUMBER:service_ephemeral_id}.*\[client%{SPACE}%{IPV4:source_ip}\].*ModSecurity:%{SPACE}%{WORD:log_level}.%{SPACE}%{GREEDYDATA:remaining}",
                "<%{INT:syslog_priority}>(?:%{INT})?%{SPACE}%{TIMESTAMP_ISO8601}%{SPACE}%{WORD:device_model_name}%{SPACE}%{HOSTNAME:service_id}.*meta sequenceId=\"%{NUMBER:service_ephemeral_id}\"\]%{SPACE}%{GREEDYDATA:remaining}"
                ]
			}
		}

        date {
            match => ["syslog_timestamp", "MMM dd HH:mm:ss.SSS", "MMM  d HH:mm:ss.SSS", "MMM  dd HH:mm:ss.SSS"]
            target => "@timestamp"
        }

		if [service_id] =~ "wafd" {
            grok {
			    match => {
                    "remaining" => [
                    ".*Pattern match \"%{NOTSPACE:vulnerability_reference}\".*\[id%{SPACE}\"%{NUMBER:vulnerability_id}\"\].*\[msg%{SPACE}%{QUOTEDSTRING:vulnerability_description}.*\[severity%{SPACE}\"%{WORD:vulnerability_severity}.*\[hostname%{SPACE}\"%{IPV4:host_ip}"
                    ]
			    }
		    }
        }

        mutate {
            remove_field => ["syslog_priority", "syslog_timestamp"]

            add_field => {
                "[event][kind]" => "event"
                "[event][category]" => "firewall"
                "[event][provider]" => "kemp-ecs"
                "[observer][vendor]" => "kemp-ecs"
			}
			rename => {
				"service_id" => "[service][id]"
				"log_source" => "[service][name]"
				"interface" => "[interface][name]"
                "device_model_name" => "[device][model][name]"
                "service_ephemeral_id" => "[service][ephemeral][id]"
                "source_ip" => "[source][ip]"
                "log_level" => "[log][level]"
                "remaining" => "[log][logger]"
                "host_ip" => "[host][ip]"
                "vulnerability_reference" => "[vulnerability][reference]"
                "vulnerability_id" => "[vulnerability][id]"
                "vulnerability_description" => "[vulnerability][description]"
                "vulnerability_severity" => "[vulnerability][severity]"
			}
            convert => {
                "[service][id]" => "string"
                "[service][ephemeral][id]" => "string"
                "[service][name]" => "string"
                "[interface][name]" => "string"
                "[log][logger]" => "string"
                "[vulnerability][id]" => "string"
                "[vulnerability][vulnerability_description]" => "string"
            }
		}
    }
}

output {
    #START_OF_HTTP_BLOCK
    http {
        url => "INGRESS_URL/externalevents/%{[@metadata][_provider]}/TKN_ID"
        http_method => "post"
        #HEADERS
    }
    #END_OF_HTTP_BLOCK
	#FILE_OUTPUT
}
